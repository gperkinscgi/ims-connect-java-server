package com.cgi.icbc.imsconnect.util;

import java.nio.charset.Charset;
import java.util.Arrays;

/**
 * Utility class for converting between ASCII and EBCDIC character encodings.
 * Based on the IBM037 (EBCDIC) character set used by mainframe systems.
 */
public final class EbcdicConverter {

    private static final Charset EBCDIC_CHARSET = Charset.forName("IBM037");
    private static final Charset ASCII_CHARSET = Charset.forName("ASCII");

    // EBCDIC to ASCII translation table (256 entries)
    private static final byte[] EBCDIC_TO_ASCII = {
        0x00, 0x01, 0x02, 0x03, 0x37, 0x2D, 0x2E, 0x2F, 0x16, 0x05, 0x25, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
        0x10, 0x11, 0x12, 0x13, 0x3C, 0x3D, 0x32, 0x26, 0x18, 0x19, 0x3F, 0x27, 0x1C, 0x1D, 0x1E, 0x1F,
        0x40, 0x5A, 0x7F, 0x7B, 0x5B, 0x6C, 0x50, 0x7D, 0x4D, 0x5D, 0x5C, 0x4E, 0x6B, 0x60, 0x4B, 0x61,
        (byte) 0xF0, (byte) 0xF1, (byte) 0xF2, (byte) 0xF3, (byte) 0xF4, (byte) 0xF5, (byte) 0xF6, (byte) 0xF7,
        (byte) 0xF8, (byte) 0xF9, 0x7A, 0x5E, 0x4C, 0x7E, 0x6E, 0x6F, 0x7C, (byte) 0xC1, (byte) 0xC2, (byte) 0xC3,
        (byte) 0xC4, (byte) 0xC5, (byte) 0xC6, (byte) 0xC7, (byte) 0xC8, (byte) 0xC9, (byte) 0xD1, (byte) 0xD2,
        (byte) 0xD3, (byte) 0xD4, (byte) 0xD5, (byte) 0xD6, (byte) 0xD7, (byte) 0xD8, (byte) 0xD9, (byte) 0xE2,
        (byte) 0xE3, (byte) 0xE4, (byte) 0xE5, (byte) 0xE6, (byte) 0xE7, (byte) 0xE8, (byte) 0xE9, (byte) 0xAD,
        (byte) 0xE0, 0x42, 0x43, 0x44, 0x47, 0x49, 0x4A, (byte) 0xAB, 0x48, 0x54, 0x51, 0x56, 0x58, 0x59,
        (byte) 0xCA, (byte) 0xCB, (byte) 0xCC, (byte) 0xCD, (byte) 0xCE, (byte) 0xCF, (byte) 0xDA, (byte) 0xDB,
        (byte) 0xDC, (byte) 0xDD, (byte) 0xDE, (byte) 0xDF, (byte) 0xEA, (byte) 0xEB, (byte) 0xEC, (byte) 0xED,
        (byte) 0xEE, (byte) 0xEF, (byte) 0xFA, (byte) 0xFB, (byte) 0xFC, (byte) 0xFD, (byte) 0xFE, (byte) 0xFF,
        0x41, (byte) 0xAA, 0x4F, (byte) 0xB0, (byte) 0xB1, (byte) 0xB2, 0x6A, (byte) 0xB5, (byte) 0xBD,
        (byte) 0xB4, (byte) 0x9A, (byte) 0x8A, (byte) 0xBA, (byte) 0xCA, (byte) 0xAF, (byte) 0xBC,
        (byte) 0x90, (byte) 0x8F, (byte) 0xEA, (byte) 0xFA, (byte) 0xBE, (byte) 0xA0, (byte) 0xB6, 0x6D,
        0x79, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96,
        0x97, 0x98, 0x99, (byte) 0xA2, (byte) 0xA3, (byte) 0xA4, (byte) 0xA5, (byte) 0xA6, (byte) 0xA7,
        (byte) 0xA8, (byte) 0xA9, (byte) 0xC0, 0x4F, (byte) 0xD0, (byte) 0xA1, 0x07, 0x20, 0x21, 0x22, 0x23, 0x24,
        0x15, 0x06, 0x17, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x09, 0x0A, 0x1B, 0x30, 0x31, 0x1A, 0x33, 0x34,
        0x35, 0x36, 0x08, 0x38, 0x39, 0x3A, 0x3B, 0x04, 0x14, 0x3E, (byte) 0xFF, 0x41, (byte) 0xE1, 0x45, 0x46
    };

    // ASCII to EBCDIC translation table (256 entries)
    private static final byte[] ASCII_TO_EBCDIC = {
        0x00, 0x01, 0x02, 0x03, (byte) 0x37, 0x2D, 0x2E, 0x2F, 0x16, 0x05, 0x15, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
        0x10, 0x11, 0x12, 0x13, 0x3C, 0x3D, 0x32, 0x26, 0x18, 0x19, 0x3F, 0x27, 0x1C, 0x1D, 0x1E, 0x1F,
        0x40, (byte) 0x5A, 0x7F, 0x7B, 0x5B, 0x6C, 0x50, 0x7D, 0x4D, 0x5D, 0x5C, 0x4E, 0x6B, 0x60, 0x4B, 0x61,
        (byte) 0xF0, (byte) 0xF1, (byte) 0xF2, (byte) 0xF3, (byte) 0xF4, (byte) 0xF5, (byte) 0xF6, (byte) 0xF7,
        (byte) 0xF8, (byte) 0xF9, 0x7A, 0x5E, 0x4C, 0x7E, 0x6E, 0x6F, 0x7C, (byte) 0xC1, (byte) 0xC2, (byte) 0xC3,
        (byte) 0xC4, (byte) 0xC5, (byte) 0xC6, (byte) 0xC7, (byte) 0xC8, (byte) 0xC9, (byte) 0xD1, (byte) 0xD2,
        (byte) 0xD3, (byte) 0xD4, (byte) 0xD5, (byte) 0xD6, (byte) 0xD7, (byte) 0xD8, (byte) 0xD9, (byte) 0xE2,
        (byte) 0xE3, (byte) 0xE4, (byte) 0xE5, (byte) 0xE6, (byte) 0xE7, (byte) 0xE8, (byte) 0xE9, (byte) 0xBA,
        (byte) 0xE0, (byte) 0xBB, (byte) 0xB0, (byte) 0xB1, (byte) 0xB2, (byte) 0xB3, (byte) 0xB4, (byte) 0xB5,
        (byte) 0xB6, (byte) 0xB7, (byte) 0xB8, (byte) 0xB9, (byte) 0xAB, (byte) 0xBB, (byte) 0xBC, (byte) 0xBD,
        (byte) 0xBE, (byte) 0xBF, (byte) 0xCB, (byte) 0xCC, (byte) 0xCD, (byte) 0xDB, (byte) 0xDC, (byte) 0xDD,
        (byte) 0xDE, (byte) 0xDF, (byte) 0xEA, (byte) 0xEB, (byte) 0xEC, (byte) 0xED, (byte) 0xEE, (byte) 0xEF,
        (byte) 0xFB, (byte) 0xFC, (byte) 0xFD, (byte) 0xFE, (byte) 0xFF, (byte) 0xA7, (byte) 0xA8, (byte) 0xAE,
        (byte) 0xAF, (byte) 0x80, (byte) 0x81, (byte) 0x82, (byte) 0x83, (byte) 0x84, (byte) 0x85, (byte) 0x86,
        (byte) 0x87, (byte) 0x88, (byte) 0x89, (byte) 0x8A, (byte) 0x8B, (byte) 0x8C, (byte) 0x8D, (byte) 0x8E,
        (byte) 0x8F, (byte) 0x90, (byte) 0x91, (byte) 0x92, (byte) 0x93, (byte) 0x94, (byte) 0x95, (byte) 0x96,
        (byte) 0x97, (byte) 0x98, (byte) 0x99, (byte) 0x9A, (byte) 0x9B, (byte) 0x9C, (byte) 0x9D, (byte) 0x9E,
        (byte) 0x9F, (byte) 0xA0, (byte) 0xA1, (byte) 0xA2, (byte) 0xA3, (byte) 0xA4, (byte) 0xA5, (byte) 0xA6,
        0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x06, 0x17, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x09, 0x0A, 0x1B,
        0x30, 0x31, 0x1A, 0x33, 0x34, 0x35, 0x36, 0x08, 0x38, 0x39, 0x3A, 0x3B, 0x04, 0x14, 0x3E, (byte) 0xFF
    };

    private EbcdicConverter() {
        // Utility class - prevent instantiation
    }

    /**
     * Converts ASCII bytes to EBCDIC bytes.
     *
     * @param asciiBytes the ASCII byte array to convert
     * @return the converted EBCDIC byte array
     */
    public static byte[] asciiToEbcdic(byte[] asciiBytes) {
        if (asciiBytes == null) {
            return null;
        }

        byte[] ebcdicBytes = new byte[asciiBytes.length];
        for (int i = 0; i < asciiBytes.length; i++) {
            int asciiValue = asciiBytes[i] & 0xFF;
            ebcdicBytes[i] = ASCII_TO_EBCDIC[asciiValue];
        }
        return ebcdicBytes;
    }

    /**
     * Converts EBCDIC bytes to ASCII bytes.
     *
     * @param ebcdicBytes the EBCDIC byte array to convert
     * @return the converted ASCII byte array
     */
    public static byte[] ebcdicToAscii(byte[] ebcdicBytes) {
        if (ebcdicBytes == null) {
            return null;
        }

        byte[] asciiBytes = new byte[ebcdicBytes.length];
        for (int i = 0; i < ebcdicBytes.length; i++) {
            int ebcdicValue = ebcdicBytes[i] & 0xFF;
            asciiBytes[i] = EBCDIC_TO_ASCII[ebcdicValue];
        }
        return asciiBytes;
    }

    /**
     * Converts an ASCII string to EBCDIC bytes.
     *
     * @param asciiString the ASCII string to convert
     * @return the converted EBCDIC byte array
     */
    public static byte[] asciiToEbcdic(String asciiString) {
        if (asciiString == null) {
            return null;
        }
        return asciiToEbcdic(asciiString.getBytes(ASCII_CHARSET));
    }

    /**
     * Converts EBCDIC bytes to an ASCII string.
     *
     * @param ebcdicBytes the EBCDIC byte array to convert
     * @return the converted ASCII string
     */
    public static String ebcdicToAscii(byte[] ebcdicBytes) {
        if (ebcdicBytes == null) {
            return null;
        }
        return new String(ebcdicToAscii(ebcdicBytes), ASCII_CHARSET);
    }

    /**
     * Pads or truncates a string to the specified length and converts to EBCDIC.
     * Useful for fixed-length EBCDIC fields in IMS messages.
     *
     * @param value the string value to convert
     * @param length the target length
     * @param padChar the character to use for padding (typically space)
     * @return EBCDIC byte array of the specified length
     */
    public static byte[] toFixedLengthEbcdic(String value, int length, char padChar) {
        if (value == null) {
            value = "";
        }

        String padded;
        if (value.length() > length) {
            padded = value.substring(0, length);
        } else {
            padded = String.format("%-" + length + "s", value).replace(' ', padChar);
        }

        return asciiToEbcdic(padded);
    }

    /**
     * Converts fixed-length EBCDIC field to trimmed ASCII string.
     *
     * @param ebcdicBytes the EBCDIC byte array
     * @return trimmed ASCII string
     */
    public static String fromFixedLengthEbcdic(byte[] ebcdicBytes) {
        if (ebcdicBytes == null) {
            return "";
        }

        String ascii = ebcdicToAscii(ebcdicBytes);
        return ascii.trim();
    }
}